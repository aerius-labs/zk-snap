import {
  Poseidon,
  Experimental,
  Signature,
  Field,
  MerkleWitness,
  Struct,
  Nullifier,
  PublicKey,
} from 'snarkyjs';

export class UserState extends Struct({
  // Public
  nullifier: Nullifier,
  encryptionPublicKey: PublicKey,
  voterRoot: Field,
  userPublicKey: PublicKey,
  electionID: Field,
}) {
  static create(
    nullifier: Nullifier,
    encryptionPublicKey: PublicKey,
    voterRoot: Field,
    userPublicKey: PublicKey,
    electionID: Field
  ) {
    return new UserState({
      nullifier,
      encryptionPublicKey,
      voterRoot,
      userPublicKey,
      electionID,
    });
  }
}

export class MyMerkleWitness extends MerkleWitness(8) {}

export const UserCircuit = Experimental.ZkProgram({
  publicInput: UserState,

  methods: {
    generateProof: {
      privateInputs: [Signature, Field, Field, Field, Field, MyMerkleWitness],

      method(
        userState: UserState,
        userSignature: Signature,
        vote: Field,
        voteWeight: Field,
        salt: Field,
        userBalance: Field,
        merkleProof: MyMerkleWitness
      ) {
        // Check if voteWeight <= userBalance
        voteWeight.assertLessThanOrEqual(userBalance);

        // Construct merkle leaf
        const merkleLeaf = Poseidon.hash([
          userState.userPublicKey.x,
          userBalance,
        ]);

        // Verify against merkleRoot using merkleProof
        merkleProof.calculateRoot(merkleLeaf).assertEquals(userState.voterRoot);

        // TODO
        // Encrypt vote and verify against input

        // Check if userSignature is generated by userPrivateKey
        userSignature.verify(userState.userPublicKey, [
          userState.userPublicKey.x,
          userState.electionID,
        ]);

        // Verify the nullifier
        userState.nullifier.verify([
          userState.userPublicKey.x,
          userState.electionID,
        ]);
      },
    },
  },
});
